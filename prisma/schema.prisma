generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            String    @id @default(uuid()) @db.Uuid
  name          String    @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  password_hash String    @db.VarChar(255)
  role          AdminRole @default(ADMIN)
  is_active     Boolean   @default(true)
  last_login    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now()) @updatedAt

  // Relations
  sessions AdminSession[]

  @@index([email])
  @@index([role])
  @@map("admins")
}

model AdminSession {
  id           String   @id @default(uuid()) @db.Uuid
  admin_id     String   @db.Uuid
  token_hash   String   @db.VarChar(255)
  device_info  String?
  ip_address   String?
  is_active    Boolean  @default(true)
  expires_at   DateTime
  created_at   DateTime @default(now())
  last_used_at DateTime @default(now())

  // Relations
  admin Admin @relation(fields: [admin_id], references: [id], onDelete: Cascade)

  @@index([admin_id])
  @@index([token_hash])
  @@map("admin_sessions")
}

enum AdminRole {
  ADMIN

  @@map("admin_role")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  role          String?
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
